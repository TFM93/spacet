// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	bookings "spacet/internal/app/bookings"

	domain "spacet/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// BookingsServiceQueries is an autogenerated mock type for the BookingsServiceQueries type
type BookingsServiceQueries struct {
	mock.Mock
}

type BookingsServiceQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *BookingsServiceQueries) EXPECT() *BookingsServiceQueries_Expecter {
	return &BookingsServiceQueries_Expecter{mock: &_m.Mock}
}

// ListTickets provides a mock function with given fields: ctx, req
func (_m *BookingsServiceQueries) ListTickets(ctx context.Context, req bookings.ListTicketsRequest) ([]*domain.Ticket, string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListTickets")
	}

	var r0 []*domain.Ticket
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, bookings.ListTicketsRequest) ([]*domain.Ticket, string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bookings.ListTicketsRequest) []*domain.Ticket); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Ticket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bookings.ListTicketsRequest) string); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, bookings.ListTicketsRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BookingsServiceQueries_ListTickets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTickets'
type BookingsServiceQueries_ListTickets_Call struct {
	*mock.Call
}

// ListTickets is a helper method to define mock.On call
//   - ctx context.Context
//   - req bookings.ListTicketsRequest
func (_e *BookingsServiceQueries_Expecter) ListTickets(ctx interface{}, req interface{}) *BookingsServiceQueries_ListTickets_Call {
	return &BookingsServiceQueries_ListTickets_Call{Call: _e.mock.On("ListTickets", ctx, req)}
}

func (_c *BookingsServiceQueries_ListTickets_Call) Run(run func(ctx context.Context, req bookings.ListTicketsRequest)) *BookingsServiceQueries_ListTickets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bookings.ListTicketsRequest))
	})
	return _c
}

func (_c *BookingsServiceQueries_ListTickets_Call) Return(_a0 []*domain.Ticket, nextCursor string, err error) *BookingsServiceQueries_ListTickets_Call {
	_c.Call.Return(_a0, nextCursor, err)
	return _c
}

func (_c *BookingsServiceQueries_ListTickets_Call) RunAndReturn(run func(context.Context, bookings.ListTicketsRequest) ([]*domain.Ticket, string, error)) *BookingsServiceQueries_ListTickets_Call {
	_c.Call.Return(run)
	return _c
}

// NewBookingsServiceQueries creates a new instance of BookingsServiceQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingsServiceQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingsServiceQueries {
	mock := &BookingsServiceQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
