// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HealthCheckServiceQueries is an autogenerated mock type for the HealthCheckServiceQueries type
type HealthCheckServiceQueries struct {
	mock.Mock
}

type HealthCheckServiceQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *HealthCheckServiceQueries) EXPECT() *HealthCheckServiceQueries_Expecter {
	return &HealthCheckServiceQueries_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx
func (_m *HealthCheckServiceQueries) Check(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HealthCheckServiceQueries_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type HealthCheckServiceQueries_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
func (_e *HealthCheckServiceQueries_Expecter) Check(ctx interface{}) *HealthCheckServiceQueries_Check_Call {
	return &HealthCheckServiceQueries_Check_Call{Call: _e.mock.On("Check", ctx)}
}

func (_c *HealthCheckServiceQueries_Check_Call) Run(run func(ctx context.Context)) *HealthCheckServiceQueries_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *HealthCheckServiceQueries_Check_Call) Return(_a0 bool) *HealthCheckServiceQueries_Check_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HealthCheckServiceQueries_Check_Call) RunAndReturn(run func(context.Context) bool) *HealthCheckServiceQueries_Check_Call {
	_c.Call.Return(run)
	return _c
}

// NewHealthCheckServiceQueries creates a new instance of HealthCheckServiceQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealthCheckServiceQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealthCheckServiceQueries {
	mock := &HealthCheckServiceQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
