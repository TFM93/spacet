// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "spacet/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SyncServiceCommands is an autogenerated mock type for the SyncServiceCommands type
type SyncServiceCommands struct {
	mock.Mock
}

type SyncServiceCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *SyncServiceCommands) EXPECT() *SyncServiceCommands_Expecter {
	return &SyncServiceCommands_Expecter{mock: &_m.Mock}
}

// SyncIfNecessary provides a mock function with given fields: ctx, resourceName, syncInterval, syncFn
func (_m *SyncServiceCommands) SyncIfNecessary(ctx context.Context, resourceName string, syncInterval time.Duration, syncFn domain.SyncAction) error {
	ret := _m.Called(ctx, resourceName, syncInterval, syncFn)

	if len(ret) == 0 {
		panic("no return value specified for SyncIfNecessary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, domain.SyncAction) error); ok {
		r0 = rf(ctx, resourceName, syncInterval, syncFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncServiceCommands_SyncIfNecessary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncIfNecessary'
type SyncServiceCommands_SyncIfNecessary_Call struct {
	*mock.Call
}

// SyncIfNecessary is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceName string
//   - syncInterval time.Duration
//   - syncFn domain.SyncAction
func (_e *SyncServiceCommands_Expecter) SyncIfNecessary(ctx interface{}, resourceName interface{}, syncInterval interface{}, syncFn interface{}) *SyncServiceCommands_SyncIfNecessary_Call {
	return &SyncServiceCommands_SyncIfNecessary_Call{Call: _e.mock.On("SyncIfNecessary", ctx, resourceName, syncInterval, syncFn)}
}

func (_c *SyncServiceCommands_SyncIfNecessary_Call) Run(run func(ctx context.Context, resourceName string, syncInterval time.Duration, syncFn domain.SyncAction)) *SyncServiceCommands_SyncIfNecessary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(domain.SyncAction))
	})
	return _c
}

func (_c *SyncServiceCommands_SyncIfNecessary_Call) Return(_a0 error) *SyncServiceCommands_SyncIfNecessary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SyncServiceCommands_SyncIfNecessary_Call) RunAndReturn(run func(context.Context, string, time.Duration, domain.SyncAction) error) *SyncServiceCommands_SyncIfNecessary_Call {
	_c.Call.Return(run)
	return _c
}

// NewSyncServiceCommands creates a new instance of SyncServiceCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncServiceCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *SyncServiceCommands {
	mock := &SyncServiceCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
