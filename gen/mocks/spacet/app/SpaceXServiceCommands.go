// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "spacet/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// SpaceXServiceCommands is an autogenerated mock type for the SpaceXServiceCommands type
type SpaceXServiceCommands struct {
	mock.Mock
}

type SpaceXServiceCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *SpaceXServiceCommands) EXPECT() *SpaceXServiceCommands_Expecter {
	return &SpaceXServiceCommands_Expecter{mock: &_m.Mock}
}

// SaveExternalLaunches provides a mock function with given fields: ctx, launches
func (_m *SpaceXServiceCommands) SaveExternalLaunches(ctx context.Context, launches []*domain.Launch) error {
	ret := _m.Called(ctx, launches)

	if len(ret) == 0 {
		panic("no return value specified for SaveExternalLaunches")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Launch) error); ok {
		r0 = rf(ctx, launches)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SpaceXServiceCommands_SaveExternalLaunches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveExternalLaunches'
type SpaceXServiceCommands_SaveExternalLaunches_Call struct {
	*mock.Call
}

// SaveExternalLaunches is a helper method to define mock.On call
//   - ctx context.Context
//   - launches []*domain.Launch
func (_e *SpaceXServiceCommands_Expecter) SaveExternalLaunches(ctx interface{}, launches interface{}) *SpaceXServiceCommands_SaveExternalLaunches_Call {
	return &SpaceXServiceCommands_SaveExternalLaunches_Call{Call: _e.mock.On("SaveExternalLaunches", ctx, launches)}
}

func (_c *SpaceXServiceCommands_SaveExternalLaunches_Call) Run(run func(ctx context.Context, launches []*domain.Launch)) *SpaceXServiceCommands_SaveExternalLaunches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*domain.Launch))
	})
	return _c
}

func (_c *SpaceXServiceCommands_SaveExternalLaunches_Call) Return(err error) *SpaceXServiceCommands_SaveExternalLaunches_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SpaceXServiceCommands_SaveExternalLaunches_Call) RunAndReturn(run func(context.Context, []*domain.Launch) error) *SpaceXServiceCommands_SaveExternalLaunches_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLaunchPads provides a mock function with given fields: ctx
func (_m *SpaceXServiceCommands) UpdateLaunchPads(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunchPads")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SpaceXServiceCommands_UpdateLaunchPads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLaunchPads'
type SpaceXServiceCommands_UpdateLaunchPads_Call struct {
	*mock.Call
}

// UpdateLaunchPads is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SpaceXServiceCommands_Expecter) UpdateLaunchPads(ctx interface{}) *SpaceXServiceCommands_UpdateLaunchPads_Call {
	return &SpaceXServiceCommands_UpdateLaunchPads_Call{Call: _e.mock.On("UpdateLaunchPads", ctx)}
}

func (_c *SpaceXServiceCommands_UpdateLaunchPads_Call) Run(run func(ctx context.Context)) *SpaceXServiceCommands_UpdateLaunchPads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SpaceXServiceCommands_UpdateLaunchPads_Call) Return(err error) *SpaceXServiceCommands_UpdateLaunchPads_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SpaceXServiceCommands_UpdateLaunchPads_Call) RunAndReturn(run func(context.Context) error) *SpaceXServiceCommands_UpdateLaunchPads_Call {
	_c.Call.Return(run)
	return _c
}

// NewSpaceXServiceCommands creates a new instance of SpaceXServiceCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpaceXServiceCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *SpaceXServiceCommands {
	mock := &SpaceXServiceCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
