// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// BookingsOrchestrator is an autogenerated mock type for the BookingsOrchestrator type
type BookingsOrchestrator struct {
	mock.Mock
}

type BookingsOrchestrator_Expecter struct {
	mock *mock.Mock
}

func (_m *BookingsOrchestrator) EXPECT() *BookingsOrchestrator_Expecter {
	return &BookingsOrchestrator_Expecter{mock: &_m.Mock}
}

// GracefulStop provides a mock function with given fields:
func (_m *BookingsOrchestrator) GracefulStop() {
	_m.Called()
}

// BookingsOrchestrator_GracefulStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GracefulStop'
type BookingsOrchestrator_GracefulStop_Call struct {
	*mock.Call
}

// GracefulStop is a helper method to define mock.On call
func (_e *BookingsOrchestrator_Expecter) GracefulStop() *BookingsOrchestrator_GracefulStop_Call {
	return &BookingsOrchestrator_GracefulStop_Call{Call: _e.mock.On("GracefulStop")}
}

func (_c *BookingsOrchestrator_GracefulStop_Call) Run(run func()) *BookingsOrchestrator_GracefulStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BookingsOrchestrator_GracefulStop_Call) Return() *BookingsOrchestrator_GracefulStop_Call {
	_c.Call.Return()
	return _c
}

func (_c *BookingsOrchestrator_GracefulStop_Call) RunAndReturn(run func()) *BookingsOrchestrator_GracefulStop_Call {
	_c.Call.Return(run)
	return _c
}

// StartScheduledSync provides a mock function with given fields: ctx, interval
func (_m *BookingsOrchestrator) StartScheduledSync(ctx context.Context, interval time.Duration) {
	_m.Called(ctx, interval)
}

// BookingsOrchestrator_StartScheduledSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartScheduledSync'
type BookingsOrchestrator_StartScheduledSync_Call struct {
	*mock.Call
}

// StartScheduledSync is a helper method to define mock.On call
//   - ctx context.Context
//   - interval time.Duration
func (_e *BookingsOrchestrator_Expecter) StartScheduledSync(ctx interface{}, interval interface{}) *BookingsOrchestrator_StartScheduledSync_Call {
	return &BookingsOrchestrator_StartScheduledSync_Call{Call: _e.mock.On("StartScheduledSync", ctx, interval)}
}

func (_c *BookingsOrchestrator_StartScheduledSync_Call) Run(run func(ctx context.Context, interval time.Duration)) *BookingsOrchestrator_StartScheduledSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *BookingsOrchestrator_StartScheduledSync_Call) Return() *BookingsOrchestrator_StartScheduledSync_Call {
	_c.Call.Return()
	return _c
}

func (_c *BookingsOrchestrator_StartScheduledSync_Call) RunAndReturn(run func(context.Context, time.Duration)) *BookingsOrchestrator_StartScheduledSync_Call {
	_c.Call.Return(run)
	return _c
}

// SyncOnce provides a mock function with given fields: ctx, syncInterval
func (_m *BookingsOrchestrator) SyncOnce(ctx context.Context, syncInterval time.Duration) error {
	ret := _m.Called(ctx, syncInterval)

	if len(ret) == 0 {
		panic("no return value specified for SyncOnce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, syncInterval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookingsOrchestrator_SyncOnce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncOnce'
type BookingsOrchestrator_SyncOnce_Call struct {
	*mock.Call
}

// SyncOnce is a helper method to define mock.On call
//   - ctx context.Context
//   - syncInterval time.Duration
func (_e *BookingsOrchestrator_Expecter) SyncOnce(ctx interface{}, syncInterval interface{}) *BookingsOrchestrator_SyncOnce_Call {
	return &BookingsOrchestrator_SyncOnce_Call{Call: _e.mock.On("SyncOnce", ctx, syncInterval)}
}

func (_c *BookingsOrchestrator_SyncOnce_Call) Run(run func(ctx context.Context, syncInterval time.Duration)) *BookingsOrchestrator_SyncOnce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *BookingsOrchestrator_SyncOnce_Call) Return(_a0 error) *BookingsOrchestrator_SyncOnce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BookingsOrchestrator_SyncOnce_Call) RunAndReturn(run func(context.Context, time.Duration) error) *BookingsOrchestrator_SyncOnce_Call {
	_c.Call.Return(run)
	return _c
}

// NewBookingsOrchestrator creates a new instance of BookingsOrchestrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingsOrchestrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingsOrchestrator {
	mock := &BookingsOrchestrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
