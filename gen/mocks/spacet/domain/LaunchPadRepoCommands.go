// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "spacet/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// LaunchPadRepoCommands is an autogenerated mock type for the LaunchPadRepoCommands type
type LaunchPadRepoCommands struct {
	mock.Mock
}

type LaunchPadRepoCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *LaunchPadRepoCommands) EXPECT() *LaunchPadRepoCommands_Expecter {
	return &LaunchPadRepoCommands_Expecter{mock: &_m.Mock}
}

// SaveLaunchPad provides a mock function with given fields: ctx, launch
func (_m *LaunchPadRepoCommands) SaveLaunchPad(ctx context.Context, launch *domain.LaunchPad) (string, error) {
	ret := _m.Called(ctx, launch)

	if len(ret) == 0 {
		panic("no return value specified for SaveLaunchPad")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.LaunchPad) (string, error)); ok {
		return rf(ctx, launch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.LaunchPad) string); ok {
		r0 = rf(ctx, launch)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.LaunchPad) error); ok {
		r1 = rf(ctx, launch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchPadRepoCommands_SaveLaunchPad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLaunchPad'
type LaunchPadRepoCommands_SaveLaunchPad_Call struct {
	*mock.Call
}

// SaveLaunchPad is a helper method to define mock.On call
//   - ctx context.Context
//   - launch *domain.LaunchPad
func (_e *LaunchPadRepoCommands_Expecter) SaveLaunchPad(ctx interface{}, launch interface{}) *LaunchPadRepoCommands_SaveLaunchPad_Call {
	return &LaunchPadRepoCommands_SaveLaunchPad_Call{Call: _e.mock.On("SaveLaunchPad", ctx, launch)}
}

func (_c *LaunchPadRepoCommands_SaveLaunchPad_Call) Run(run func(ctx context.Context, launch *domain.LaunchPad)) *LaunchPadRepoCommands_SaveLaunchPad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.LaunchPad))
	})
	return _c
}

func (_c *LaunchPadRepoCommands_SaveLaunchPad_Call) Return(_a0 string, _a1 error) *LaunchPadRepoCommands_SaveLaunchPad_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchPadRepoCommands_SaveLaunchPad_Call) RunAndReturn(run func(context.Context, *domain.LaunchPad) (string, error)) *LaunchPadRepoCommands_SaveLaunchPad_Call {
	_c.Call.Return(run)
	return _c
}

// NewLaunchPadRepoCommands creates a new instance of LaunchPadRepoCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLaunchPadRepoCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *LaunchPadRepoCommands {
	mock := &LaunchPadRepoCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
