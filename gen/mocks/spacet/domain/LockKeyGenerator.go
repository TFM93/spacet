// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LockKeyGenerator is an autogenerated mock type for the LockKeyGenerator type
type LockKeyGenerator struct {
	mock.Mock
}

type LockKeyGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *LockKeyGenerator) EXPECT() *LockKeyGenerator_Expecter {
	return &LockKeyGenerator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: resourceName
func (_m *LockKeyGenerator) Execute(resourceName string) uint32 {
	ret := _m.Called(resourceName)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(resourceName)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// LockKeyGenerator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type LockKeyGenerator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - resourceName string
func (_e *LockKeyGenerator_Expecter) Execute(resourceName interface{}) *LockKeyGenerator_Execute_Call {
	return &LockKeyGenerator_Execute_Call{Call: _e.mock.On("Execute", resourceName)}
}

func (_c *LockKeyGenerator_Execute_Call) Run(run func(resourceName string)) *LockKeyGenerator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LockKeyGenerator_Execute_Call) Return(_a0 uint32) *LockKeyGenerator_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LockKeyGenerator_Execute_Call) RunAndReturn(run func(string) uint32) *LockKeyGenerator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewLockKeyGenerator creates a new instance of LockKeyGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLockKeyGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *LockKeyGenerator {
	mock := &LockKeyGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
