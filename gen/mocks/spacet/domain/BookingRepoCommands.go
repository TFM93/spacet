// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "spacet/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// BookingRepoCommands is an autogenerated mock type for the BookingRepoCommands type
type BookingRepoCommands struct {
	mock.Mock
}

type BookingRepoCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *BookingRepoCommands) EXPECT() *BookingRepoCommands_Expecter {
	return &BookingRepoCommands_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: ctx, lPadRestriction
func (_m *BookingRepoCommands) Cancel(ctx context.Context, lPadRestriction map[string][]time.Time) ([]uuid.UUID, error) {
	ret := _m.Called(ctx, lPadRestriction)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]time.Time) ([]uuid.UUID, error)); ok {
		return rf(ctx, lPadRestriction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]time.Time) []uuid.UUID); ok {
		r0 = rf(ctx, lPadRestriction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string][]time.Time) error); ok {
		r1 = rf(ctx, lPadRestriction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookingRepoCommands_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type BookingRepoCommands_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - lPadRestriction map[string][]time.Time
func (_e *BookingRepoCommands_Expecter) Cancel(ctx interface{}, lPadRestriction interface{}) *BookingRepoCommands_Cancel_Call {
	return &BookingRepoCommands_Cancel_Call{Call: _e.mock.On("Cancel", ctx, lPadRestriction)}
}

func (_c *BookingRepoCommands_Cancel_Call) Run(run func(ctx context.Context, lPadRestriction map[string][]time.Time)) *BookingRepoCommands_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string][]time.Time))
	})
	return _c
}

func (_c *BookingRepoCommands_Cancel_Call) Return(cancelled []uuid.UUID, err error) *BookingRepoCommands_Cancel_Call {
	_c.Call.Return(cancelled, err)
	return _c
}

func (_c *BookingRepoCommands_Cancel_Call) RunAndReturn(run func(context.Context, map[string][]time.Time) ([]uuid.UUID, error)) *BookingRepoCommands_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBooking provides a mock function with given fields: ctx, booking
func (_m *BookingRepoCommands) CreateBooking(ctx context.Context, booking domain.Booking) (uuid.UUID, error) {
	ret := _m.Called(ctx, booking)

	if len(ret) == 0 {
		panic("no return value specified for CreateBooking")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Booking) (uuid.UUID, error)); ok {
		return rf(ctx, booking)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Booking) uuid.UUID); ok {
		r0 = rf(ctx, booking)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Booking) error); ok {
		r1 = rf(ctx, booking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookingRepoCommands_CreateBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBooking'
type BookingRepoCommands_CreateBooking_Call struct {
	*mock.Call
}

// CreateBooking is a helper method to define mock.On call
//   - ctx context.Context
//   - booking domain.Booking
func (_e *BookingRepoCommands_Expecter) CreateBooking(ctx interface{}, booking interface{}) *BookingRepoCommands_CreateBooking_Call {
	return &BookingRepoCommands_CreateBooking_Call{Call: _e.mock.On("CreateBooking", ctx, booking)}
}

func (_c *BookingRepoCommands_CreateBooking_Call) Run(run func(ctx context.Context, booking domain.Booking)) *BookingRepoCommands_CreateBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Booking))
	})
	return _c
}

func (_c *BookingRepoCommands_CreateBooking_Call) Return(id uuid.UUID, err error) *BookingRepoCommands_CreateBooking_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *BookingRepoCommands_CreateBooking_Call) RunAndReturn(run func(context.Context, domain.Booking) (uuid.UUID, error)) *BookingRepoCommands_CreateBooking_Call {
	_c.Call.Return(run)
	return _c
}

// NewBookingRepoCommands creates a new instance of BookingRepoCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingRepoCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingRepoCommands {
	mock := &BookingRepoCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
