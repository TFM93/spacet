// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "spacet/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BookingRepoQueries is an autogenerated mock type for the BookingRepoQueries type
type BookingRepoQueries struct {
	mock.Mock
}

type BookingRepoQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *BookingRepoQueries) EXPECT() *BookingRepoQueries_Expecter {
	return &BookingRepoQueries_Expecter{mock: &_m.Mock}
}

// ListTickets provides a mock function with given fields: ctx, cursorTicketID, cursorUpdatedAt, limit, filters
func (_m *BookingRepoQueries) ListTickets(ctx context.Context, cursorTicketID string, cursorUpdatedAt *time.Time, limit int32, filters domain.TicketSearchFilters) ([]*domain.Ticket, error) {
	ret := _m.Called(ctx, cursorTicketID, cursorUpdatedAt, limit, filters)

	if len(ret) == 0 {
		panic("no return value specified for ListTickets")
	}

	var r0 []*domain.Ticket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Time, int32, domain.TicketSearchFilters) ([]*domain.Ticket, error)); ok {
		return rf(ctx, cursorTicketID, cursorUpdatedAt, limit, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Time, int32, domain.TicketSearchFilters) []*domain.Ticket); ok {
		r0 = rf(ctx, cursorTicketID, cursorUpdatedAt, limit, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Ticket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *time.Time, int32, domain.TicketSearchFilters) error); ok {
		r1 = rf(ctx, cursorTicketID, cursorUpdatedAt, limit, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookingRepoQueries_ListTickets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTickets'
type BookingRepoQueries_ListTickets_Call struct {
	*mock.Call
}

// ListTickets is a helper method to define mock.On call
//   - ctx context.Context
//   - cursorTicketID string
//   - cursorUpdatedAt *time.Time
//   - limit int32
//   - filters domain.TicketSearchFilters
func (_e *BookingRepoQueries_Expecter) ListTickets(ctx interface{}, cursorTicketID interface{}, cursorUpdatedAt interface{}, limit interface{}, filters interface{}) *BookingRepoQueries_ListTickets_Call {
	return &BookingRepoQueries_ListTickets_Call{Call: _e.mock.On("ListTickets", ctx, cursorTicketID, cursorUpdatedAt, limit, filters)}
}

func (_c *BookingRepoQueries_ListTickets_Call) Run(run func(ctx context.Context, cursorTicketID string, cursorUpdatedAt *time.Time, limit int32, filters domain.TicketSearchFilters)) *BookingRepoQueries_ListTickets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*time.Time), args[3].(int32), args[4].(domain.TicketSearchFilters))
	})
	return _c
}

func (_c *BookingRepoQueries_ListTickets_Call) Return(_a0 []*domain.Ticket, _a1 error) *BookingRepoQueries_ListTickets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookingRepoQueries_ListTickets_Call) RunAndReturn(run func(context.Context, string, *time.Time, int32, domain.TicketSearchFilters) ([]*domain.Ticket, error)) *BookingRepoQueries_ListTickets_Call {
	_c.Call.Return(run)
	return _c
}

// NewBookingRepoQueries creates a new instance of BookingRepoQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingRepoQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingRepoQueries {
	mock := &BookingRepoQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
