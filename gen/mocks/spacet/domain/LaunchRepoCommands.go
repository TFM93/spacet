// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "spacet/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// LaunchRepoCommands is an autogenerated mock type for the LaunchRepoCommands type
type LaunchRepoCommands struct {
	mock.Mock
}

type LaunchRepoCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *LaunchRepoCommands) EXPECT() *LaunchRepoCommands_Expecter {
	return &LaunchRepoCommands_Expecter{mock: &_m.Mock}
}

// CreateLaunch provides a mock function with given fields: ctx, launch
func (_m *LaunchRepoCommands) CreateLaunch(ctx context.Context, launch domain.Launch) (string, error) {
	ret := _m.Called(ctx, launch)

	if len(ret) == 0 {
		panic("no return value specified for CreateLaunch")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Launch) (string, error)); ok {
		return rf(ctx, launch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Launch) string); ok {
		r0 = rf(ctx, launch)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Launch) error); ok {
		r1 = rf(ctx, launch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchRepoCommands_CreateLaunch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLaunch'
type LaunchRepoCommands_CreateLaunch_Call struct {
	*mock.Call
}

// CreateLaunch is a helper method to define mock.On call
//   - ctx context.Context
//   - launch domain.Launch
func (_e *LaunchRepoCommands_Expecter) CreateLaunch(ctx interface{}, launch interface{}) *LaunchRepoCommands_CreateLaunch_Call {
	return &LaunchRepoCommands_CreateLaunch_Call{Call: _e.mock.On("CreateLaunch", ctx, launch)}
}

func (_c *LaunchRepoCommands_CreateLaunch_Call) Run(run func(ctx context.Context, launch domain.Launch)) *LaunchRepoCommands_CreateLaunch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Launch))
	})
	return _c
}

func (_c *LaunchRepoCommands_CreateLaunch_Call) Return(_a0 string, _a1 error) *LaunchRepoCommands_CreateLaunch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchRepoCommands_CreateLaunch_Call) RunAndReturn(run func(context.Context, domain.Launch) (string, error)) *LaunchRepoCommands_CreateLaunch_Call {
	_c.Call.Return(run)
	return _c
}

// SaveExternalLaunches provides a mock function with given fields: ctx, launches
func (_m *LaunchRepoCommands) SaveExternalLaunches(ctx context.Context, launches []*domain.Launch) error {
	ret := _m.Called(ctx, launches)

	if len(ret) == 0 {
		panic("no return value specified for SaveExternalLaunches")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Launch) error); ok {
		r0 = rf(ctx, launches)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LaunchRepoCommands_SaveExternalLaunches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveExternalLaunches'
type LaunchRepoCommands_SaveExternalLaunches_Call struct {
	*mock.Call
}

// SaveExternalLaunches is a helper method to define mock.On call
//   - ctx context.Context
//   - launches []*domain.Launch
func (_e *LaunchRepoCommands_Expecter) SaveExternalLaunches(ctx interface{}, launches interface{}) *LaunchRepoCommands_SaveExternalLaunches_Call {
	return &LaunchRepoCommands_SaveExternalLaunches_Call{Call: _e.mock.On("SaveExternalLaunches", ctx, launches)}
}

func (_c *LaunchRepoCommands_SaveExternalLaunches_Call) Run(run func(ctx context.Context, launches []*domain.Launch)) *LaunchRepoCommands_SaveExternalLaunches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*domain.Launch))
	})
	return _c
}

func (_c *LaunchRepoCommands_SaveExternalLaunches_Call) Return(_a0 error) *LaunchRepoCommands_SaveExternalLaunches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LaunchRepoCommands_SaveExternalLaunches_Call) RunAndReturn(run func(context.Context, []*domain.Launch) error) *LaunchRepoCommands_SaveExternalLaunches_Call {
	_c.Call.Return(run)
	return _c
}

// NewLaunchRepoCommands creates a new instance of LaunchRepoCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLaunchRepoCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *LaunchRepoCommands {
	mock := &LaunchRepoCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
