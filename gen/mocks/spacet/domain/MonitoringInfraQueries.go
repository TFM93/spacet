// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MonitoringInfraQueries is an autogenerated mock type for the MonitoringInfraQueries type
type MonitoringInfraQueries struct {
	mock.Mock
}

type MonitoringInfraQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *MonitoringInfraQueries) EXPECT() *MonitoringInfraQueries_Expecter {
	return &MonitoringInfraQueries_Expecter{mock: &_m.Mock}
}

// IsEnabled provides a mock function with given fields:
func (_m *MonitoringInfraQueries) IsEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MonitoringInfraQueries_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type MonitoringInfraQueries_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
func (_e *MonitoringInfraQueries_Expecter) IsEnabled() *MonitoringInfraQueries_IsEnabled_Call {
	return &MonitoringInfraQueries_IsEnabled_Call{Call: _e.mock.On("IsEnabled")}
}

func (_c *MonitoringInfraQueries_IsEnabled_Call) Run(run func()) *MonitoringInfraQueries_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MonitoringInfraQueries_IsEnabled_Call) Return(_a0 bool) *MonitoringInfraQueries_IsEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringInfraQueries_IsEnabled_Call) RunAndReturn(run func() bool) *MonitoringInfraQueries_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MonitoringInfraQueries) Ping(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MonitoringInfraQueries_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MonitoringInfraQueries_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MonitoringInfraQueries_Expecter) Ping(ctx interface{}) *MonitoringInfraQueries_Ping_Call {
	return &MonitoringInfraQueries_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MonitoringInfraQueries_Ping_Call) Run(run func(ctx context.Context)) *MonitoringInfraQueries_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MonitoringInfraQueries_Ping_Call) Return(_a0 bool) *MonitoringInfraQueries_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitoringInfraQueries_Ping_Call) RunAndReturn(run func(context.Context) bool) *MonitoringInfraQueries_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// NewMonitoringInfraQueries creates a new instance of MonitoringInfraQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMonitoringInfraQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *MonitoringInfraQueries {
	mock := &MonitoringInfraQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
