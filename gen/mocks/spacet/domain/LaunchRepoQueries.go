// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// LaunchRepoQueries is an autogenerated mock type for the LaunchRepoQueries type
type LaunchRepoQueries struct {
	mock.Mock
}

type LaunchRepoQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *LaunchRepoQueries) EXPECT() *LaunchRepoQueries_Expecter {
	return &LaunchRepoQueries_Expecter{mock: &_m.Mock}
}

// IsLaunchpadAvailableForDate provides a mock function with given fields: ctx, launchpadID, date
func (_m *LaunchRepoQueries) IsLaunchpadAvailableForDate(ctx context.Context, launchpadID string, date time.Time) (bool, error) {
	ret := _m.Called(ctx, launchpadID, date)

	if len(ret) == 0 {
		panic("no return value specified for IsLaunchpadAvailableForDate")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (bool, error)); ok {
		return rf(ctx, launchpadID, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) bool); ok {
		r0 = rf(ctx, launchpadID, date)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, launchpadID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchRepoQueries_IsLaunchpadAvailableForDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLaunchpadAvailableForDate'
type LaunchRepoQueries_IsLaunchpadAvailableForDate_Call struct {
	*mock.Call
}

// IsLaunchpadAvailableForDate is a helper method to define mock.On call
//   - ctx context.Context
//   - launchpadID string
//   - date time.Time
func (_e *LaunchRepoQueries_Expecter) IsLaunchpadAvailableForDate(ctx interface{}, launchpadID interface{}, date interface{}) *LaunchRepoQueries_IsLaunchpadAvailableForDate_Call {
	return &LaunchRepoQueries_IsLaunchpadAvailableForDate_Call{Call: _e.mock.On("IsLaunchpadAvailableForDate", ctx, launchpadID, date)}
}

func (_c *LaunchRepoQueries_IsLaunchpadAvailableForDate_Call) Run(run func(ctx context.Context, launchpadID string, date time.Time)) *LaunchRepoQueries_IsLaunchpadAvailableForDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *LaunchRepoQueries_IsLaunchpadAvailableForDate_Call) Return(_a0 bool, _a1 error) *LaunchRepoQueries_IsLaunchpadAvailableForDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchRepoQueries_IsLaunchpadAvailableForDate_Call) RunAndReturn(run func(context.Context, string, time.Time) (bool, error)) *LaunchRepoQueries_IsLaunchpadAvailableForDate_Call {
	_c.Call.Return(run)
	return _c
}

// LaunchesOnSameDestinationOnTargetWeek provides a mock function with given fields: ctx, launchpadID, date, destination
func (_m *LaunchRepoQueries) LaunchesOnSameDestinationOnTargetWeek(ctx context.Context, launchpadID string, date time.Time, destination string) (int, error) {
	ret := _m.Called(ctx, launchpadID, date, destination)

	if len(ret) == 0 {
		panic("no return value specified for LaunchesOnSameDestinationOnTargetWeek")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, string) (int, error)); ok {
		return rf(ctx, launchpadID, date, destination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, string) int); ok {
		r0 = rf(ctx, launchpadID, date, destination)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, string) error); ok {
		r1 = rf(ctx, launchpadID, date, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchRepoQueries_LaunchesOnSameDestinationOnTargetWeek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LaunchesOnSameDestinationOnTargetWeek'
type LaunchRepoQueries_LaunchesOnSameDestinationOnTargetWeek_Call struct {
	*mock.Call
}

// LaunchesOnSameDestinationOnTargetWeek is a helper method to define mock.On call
//   - ctx context.Context
//   - launchpadID string
//   - date time.Time
//   - destination string
func (_e *LaunchRepoQueries_Expecter) LaunchesOnSameDestinationOnTargetWeek(ctx interface{}, launchpadID interface{}, date interface{}, destination interface{}) *LaunchRepoQueries_LaunchesOnSameDestinationOnTargetWeek_Call {
	return &LaunchRepoQueries_LaunchesOnSameDestinationOnTargetWeek_Call{Call: _e.mock.On("LaunchesOnSameDestinationOnTargetWeek", ctx, launchpadID, date, destination)}
}

func (_c *LaunchRepoQueries_LaunchesOnSameDestinationOnTargetWeek_Call) Run(run func(ctx context.Context, launchpadID string, date time.Time, destination string)) *LaunchRepoQueries_LaunchesOnSameDestinationOnTargetWeek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(string))
	})
	return _c
}

func (_c *LaunchRepoQueries_LaunchesOnSameDestinationOnTargetWeek_Call) Return(_a0 int, _a1 error) *LaunchRepoQueries_LaunchesOnSameDestinationOnTargetWeek_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchRepoQueries_LaunchesOnSameDestinationOnTargetWeek_Call) RunAndReturn(run func(context.Context, string, time.Time, string) (int, error)) *LaunchRepoQueries_LaunchesOnSameDestinationOnTargetWeek_Call {
	_c.Call.Return(run)
	return _c
}

// NewLaunchRepoQueries creates a new instance of LaunchRepoQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLaunchRepoQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *LaunchRepoQueries {
	mock := &LaunchRepoQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
